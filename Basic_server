Server-->npm init -y
         npm i express
-->Server.js

npm run start

npm i nodemon--bar bar server start krne ka jaruarat nhi
nodemon Server.js


//controller
action-desc of what you want to do
dispatch-fun that carries out action

//postman
POST
Header --> key-Content-Type,value-application/json
Body-->raw,json,write json and send 



//npm i dotenv  
 hide the password   

//npm i mongoose
//Schema--defines the structure of documents within a collection
 specifies fields, types and any other constraints or validation
//model--act as a higher level abstraction that interacts with db based on defined schema
 it represent collection and provide an interface for querying creating and deleting doc in that collection
 Models are create dfrom schema and enables to work with mongodb


 // npm i bcryptjs 
   hash passwords         
   compare


//JWT
Tokens, such as JWTs (JSON Web Tokens), are typically not stored in the database along with other user details. Instead, they are issued by the server during the authentication process and then stored on the client-side (e.g., in cookies or local storage) for later use.
What is JWT?
JSON Web Tokens (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object

*JWTs are often used for authentication and authorization in web applications.
Authentication: Verifying the identity of a user or client.
Authorization: Determining what actions a user or client is allowed to perform.

*Components of a JWT:
Header:Contains metadata about the token, such as the type of token and the signing algorithm being used.
Payload: Contains claims or statements about an entity (typically, the user) and additional data. Common claims include user ID, username, and expiration time.
Signature: To verify that the sender of the JWT is who it says it is and to ensure that the message wasn't changed along the way, a signature is included.

//middleware
Middleware in Express is a fundamental concept that allows you to execute functions during the lifecycle of a request-response cycle. It sits between the incoming HTTP request and the route handler, enabling you to perform tasks such as parsing request bodies, logging, authentication, error handling, and more. Middleware functions have access to the request (req) and response (res) objects, as well as the next function, which passes control to the next middleware or route handler in the chain.


//zod
for validations

//CORS
npm i cors
server.js------