
// 1. **HTTP Methods Routing:** 

//    - app.get(path, callback)- Handles HTTP GET requests

     app.get('/', (req, res) => {
       res.send('Hello, World!');
     });
     

//    - app.post(path, callback): Handles HTTP POST requests

     app.post('/login', (req, res) => {
       // Handle login logic
     });
     

//    - `app.put(path, callback)`: Handles HTTP PUT requests.
     
     app.put('/users/:userId', (req, res) => {
       // Update user with id = req.params.userId
     });
    

//    - `app.delete(path, callback)`: Handles HTTP DELETE requests.
     
     app.delete('/users/:userId', (req, res) => {
       // Delete user with id = req.params.userId
     });
   

//    - `app.all(path, callback)`: Handles all HTTP methods at a particular route.
     
     app.all('/secret', (req, res, next) => {
       // Access control logic
       next(); // Pass control to the next handler
     });

//    - app.listen() is a method used to start the Express.js server and make it listen for incoming connections on a specified port. The basic syntax is:
    // app.listen(port, [host], [backlog], [callback])

     const PORT = 3000;
     app.listen(PORT, () => {
       console.log(`Server is running on port ${PORT}`);
     });
    

// 2. **Route Parameters:**

//    - `app.get('/users/:userId', callback)`: Defines a route with a parameter.
     
     app.get('/users/:userId', (req, res) => {
       const userId = req.params.userId;
       // Retrieve user data using userId
     });


// 3. **Middleware:**

//    - `app.use(callback)`: Mounts middleware to be executed before route handlers.
     
     app.use((req, res, next) => {
       // Middleware logic
       next(); // Pass control to the next middleware
     });
  

//    - `app.use(path, callback)`: Mounts middleware at a specific path.
     
     app.use('/admin', (req, res, next) => {
       // Admin middleware logic
       next(); // Pass control to the next middleware
     });


// 4. **Error Handling:**

//    - `app.use((err, req, res, next) => {...})`: Error-handling middleware.
     
     app.use((err, req, res, next) => {
       // Error handling logic
     });
    

// 5. **Response Handling:**

//    - `res.send(data)`: Sends HTTP response with data.
//    - `res.json(data)`: Sends JSON response.
//    - `res.render(view, [locals], callback)`: Renders a view template.
//    - `res.redirect(status, path)`: Redirects the request to another URL.

// 6. **Request Handling:**

//    - `req.params`: Contains route parameters.
//    - `req.query`: Contains query string parameters.
//    - `req.body`: Contains request body data.
//    - `req.cookies`: Contains cookies sent by the client.
//    - `req.headers`: Contains request headers.

// 7. **Router:**

//    - `express.Router()`: Creates a new router instance to modularize routes.

